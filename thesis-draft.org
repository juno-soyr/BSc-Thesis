:PROPERTIES:
:ID:       d46ac5b8-1cfb-47ab-b497-9bfdfec022fb
:CUSTOM_ID: Thesis_Notes
:END:
#+title: Thesis Draft
Name: Haileselassie Gaspar
Title: An application of invariance in Lambda Calculus
Supervisors : Femke Van Raamsdonk, JÃ¶rg Endrullis
* Index
** [[#Abstract][Abstract]]
** [[#Intro][Introduction]]
** [[#TheoreticalBasis][Theoretical Basis]]
** [[#Proof][Overview of proof]]
* TODO Abstract
:PROPERTIES:
:CUSTOM_ID: Abstract
:END:
* TODO Introduction
:PROPERTIES:
:CUSTOM_ID: Intro
:END:
In recent years, there has been an academic interest in order to relate Lambda Calculus with complexity classes.
* STARTED Theoretical Basis
:PROPERTIES:
:CUSTOM_ID: TheoreticalBasis
:END:
The three basic models of computation:
- Turing \rightarrow Turing machines
- Church \rightarrow Lambda calculus
  - Explain the differences a little
These models were proven to be equivalent by Turing, Kleene, Church and Rosser.
The invariance thesis:
 - Every reasonable machine can simulate each other within a polynomial bound on time and constant overhead in space
   - Orthodox
   - Liberal
We can relate reasonable machines through cost models.
* Overview of the proof
:PROPERTIES:
:CUSTOM_ID: Proof
:END:
** High Level Implementation systems
The purpose of the high level implementation system definition is to provide a rewriting system invariant to lambda calculus. This step is a bridge of sorts in between lambda calculus and turing machines. For this, we need to define this class of rewriting systems, and which properties should they satisfy in order to be invariant to lambda calculus.
*** Definition
- introduce here the definition -
